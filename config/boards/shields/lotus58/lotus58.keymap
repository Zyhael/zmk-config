/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define DEFAULT 0
#define FUNC 1
#define GAME 2
#define NUM 3

&kscan0 {
    debounce-period = <20>;
};

&sk {
	release-after-ms = <200>;
};

&mt {
	tapping-term-ms = <200>;
};

/ {
	behaviors {
		tilesc: mod_morph_tilde_escape {
			compatible = "zmk,behavior-mod-morph";
			label = "TILDE_ESCAPE";
			#binding-cells = <0>;
			bindings = <&kp ESC>, <&kp TILDE>;
			mods = <(MOD_LSFT)>;
		};

		tlt: behavior_toLayer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "sticky_tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&to>, <&kp>;
        };

		tglt: behavior_togLayer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "toggle_tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&tog>, <&kp>;
        };

	};

	combos {
		compatible = "zmk,combos";

        combo_f1 {
            timeout-ms = <25>;
            key-positions = <0 1>;
            bindings = <&kp F1>;
        };

		combo_f2 {
            timeout-ms = <25>;
            key-positions = <1 2>;
            bindings = <&kp F2>;
        };

		combo_f3 {
            timeout-ms = <25>;
            key-positions = <2 3>;
            bindings = <&kp F3>;
        };

		combo_f4 {
            timeout-ms = <25>;
            key-positions = <3 4>;
            bindings = <&kp F4>;
        };

		combo_f5 {
            timeout-ms = <25>;
            key-positions = <4 5>;
            bindings = <&kp F5>;
        };

		combo_f6 {
            timeout-ms = <25>;
            key-positions = <7 8>;
            bindings = <&kp F6>;
        };

		combo_f7 {
            timeout-ms = <25>;
            key-positions = <8 9>;
            bindings = <&kp F7>;
        };

		combo_f8 {
            timeout-ms = <25>;
            key-positions = <9 10>;
            bindings = <&kp F8>;
        };

		combo_f9 {
            timeout-ms = <25>;
            key-positions = <10 11>;
            bindings = <&kp F9>;
        };

		combo_f10 {
            timeout-ms = <25>;
            key-positions = <11 12>;
            bindings = <&kp F10>;
        };

		combo_f11 {
            timeout-ms = <25>;
            key-positions = <0 2>;
            bindings = <&kp F11>;
        };

		combo_f12 {
            timeout-ms = <25>;
            key-positions = <0 3>;
            bindings = <&kp F12>;
        };

        combo_ret {
            timeout-ms = <50>;
            key-positions = <43 54>;
            bindings = <&kp RET>;
        };
        
        combo_bspc {
            timeout-ms = <25>;
            key-positions = <16 17>;
            bindings = <&kp BSPC>;
        };

        combo_del {
            timeout-ms = <25>;
            key-positions = <15 16 17>;
            bindings = <&kp DEL>;
        };
	};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
// ------------------------------------------------------------------------------------------------------------
// | ESC   |  1  |  2  |  3  |  4  |  5  |  SS  |         |  6   |  7  |  8  |  9   |   0   |      |
// | TAB   |  Q  |  W  |  E  |  R  |  T  |                |  Y   |  U  |  I  |  O   |   P   | GAME |
// | SHIFT |  A  |  S  |  D  |  F  |  G  |                |  H   |  J  |  K  |  L   |   ;   |      |
// | CTRL  |  Z  |  X  |  C  |  V  |  B  | "()" |  | "[]" |  N   |  M  |  ,  |  .   |   /   | NUM  |
//                     | GUI | FN  | ALT | SPC  |  | "-=" | BLSH |  '  |     |
			bindings = <
&tilesc		&kp N1 	&kp N2 	&kp N3   	&kp N4   	&kp N5      &kp LG(LS(S))      				   &kp N6       &kp N7		&kp N8		&kp N9  	&kp N0   	&none
&kp TAB	    &kp Q  	&kp W  	&kp E    	&kp R		&kp T                     					   &kp Y        &kp U		&kp I   	&kp O   	&kp P    	&to GAME
&kp LSHFT	&kp A  	&kp S 	&kp D    	&kp F    	&kp G                      					   &kp H	    &kp J		&kp K   	&kp L   	&kp SEMI 	&none
&kp LCTRL 	&kp Z  	&kp X  	&kp C    	&kp V		&kp B		&mt RPAR LPAR   &mt RBKT LBKT	   &kp N	    &kp M		&kp COMMA 	&kp DOT 	&kp FSLH 	&to NUM
                            &kp LGUI 	&mo FUNC 	&kp LALT  	&kp SPACE  		&mt EQUAL MINUS    &kp BSLH     &kp SQT    	&none
			>;

			sensor-bindings = <&inc_dec_kp PG_UP PG_DN>;
		};

		func_layer {
// ------------------------------------------------------------------------------------------------------------
// |  `    |      |      |       |    |     |  SS   |            |    |      |     |    |    | DEFAULT |
// |       |      |  UP  |       |    |     |                    |    | PAUSE| INS |    |    | GAME    |
// | SHIFT | LEFT | DOWN | RIGHT |    |     |                    |    | HOME | END |    |    |         |
// | CTRL  |      |      |       |    |     |       |    |       |    |      |     |    |    | NUM     |
//                       |       |    | ALT | SPACE |    |       |    |      |     |
			bindings = <
&kp GRAVE   &none	&none		&none		&none       &none		&trans				 &none     &none            &none       &none   &none   &to DEFAULT
&kp TAB	    &none   &none		&kp UP		&none	    &none							 &none     &kp PAUSE_BREAK  &kp INS	    &none   &none	&to GAME
&kp LSHFT	&none   &kp LEFT	&kp DOWN	&kp RIGHT   &none							 &none	   &kp HOME         &kp END	    &none	&none	&none
&kp LCTRL   &none	&none		&none       &none       &none    	&none		&none    &none     &none   	        &none       &none   &none	&to NUM
                                &none       &none	    &kp LALT    &kp SPACE	&none	 &none	   &none	        &none
			>;

			sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
		};

		game_layer {
// ------------------------------------------------------------------------------------------------------------
// | ESC   |  1  |  2  |  3  |  4  |  5  |       |         |    |    |    |    |    | DEFAULT |
// | TAB   |  T  |  Q  |  W  |  E  |  R  |                 |    |    |    |    |    |         |
// | SHIFT |  G  |  A  |  S  |  D  |  F  |                 |    |    |    |    |    |         |
// | CTRL  |  B  |  Z  |  X  |  C  |  B  |   Y   |    |    |    |    |    |    |    |   NUM   |
//                 	   |  NM |  JI | ALT | SPACE |    |    |    |    |    |
			bindings = <
&kp ESC		&kp N1	&kp N2	&kp N3      &kp N4     &kp N5   	&none        	    &none    &none    &none    &none    &none    &to DEFAULT
&kp TAB		&kp T   &kp Q 	&kp W       &kp E      &kp R                 	        &none    &none    &none    &none    &none    &none
&kp LSHFT	&kp G	&kp A  	&kp S       &kp D      &kp F                 	        &none    &none    &none    &none    &none    &none
&kp LCTRL 	&kp B	&kp Z  	&kp X       &kp C      &kp V    	&kp Y   	&none   &none    &none    &none    &none    &none    &to NUM
                    		&mt N M     &mt J I    &kp LALT     &kp SPACE	&none   &none    &none    &none
			>;

			sensor-bindings = <&inc_dec_kp PG_UP PG_DN>;
		};

		number_layer {
// ------------------------------------------------------------------------------------------------------------
// |    |    |    |    |    |    |    |          |     | NLCK |  /   |  *  |  -  | DEFAULT |
// |    |    |    |    |    |    |               |     |  7   |  8   |  9  |  +  |  GAME   |
// |    |    |    |    |    |    |               |     |  4   |  5   |  6  |     |         |
// |    |    |    |    |    |    |    |    |     |     |  1   |  2   |  3  |     |         |
//                |    |    |    |    |    | ENT |  0  |  .   | BSPC |
			bindings = <
&none	&none	&none	&none    &none    &none    &none                    &none        &kp KP_NLCK    &kp KP_SLASH   &kp KP_MULTIPLY		&kp KP_MINUS    &to DEFAULT
&none	&none   &none 	&none    &none    &none                             &none        &kp KP_N7      &kp KP_N8      &kp KP_N9       		&kp KP_PLUS     &to GAME
&none	&none	&none  	&none    &none    &none                             &none        &kp KP_N4      &kp KP_N5      &kp KP_N6       		&none        	&none
&none 	&none	&none  	&none    &none    &none    &none    &none           &none        &kp KP_N1      &kp KP_N2      &kp KP_N3       		&none        	&none
                        &none    &none    &none    &none    &kp KP_ENTER    &kp N0       &kp DOT      	&kp BSPC
			>;

			sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
		};

		blank_layer {
// ------------------------------------------------------------------------------------------------------------
// |    |     |     |     |    |    |    |         |    |    |    |    |    |    |
// |    |     |  W  |     |    |    |              |    |    |    |    |    |    |
// |    |  A  |  S  |  D  |    |    |              |    |    |    |    |    |    |
// |    |     |     |     |    |    |    |    |    |    |    |    |    |    |    |
//                  |     |    |    |    |    |    |    |    |    |
			bindings = <
&none	&none	&none	&none    &none    &none    &none             &none    &none    &none    &none    &none    &none
&none	&none   &kp W 	&none    &none    &none                      &none    &none    &none    &none    &none    &none
&none	&kp A	&kp S  	&kp D    &none    &none                      &none    &none    &none    &none    &none    &none
&none 	&none	&none  	&none    &none    &none    &none    &none    &none    &none    &none    &none    &none    &none
                        &none    &none    &none    &none    &none    &none    &none    &none
			>;

			sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
		};
	};
};
